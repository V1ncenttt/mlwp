import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.autograd as autograd

def cwgan_gp_loss_function(real, fake, discriminator, lambda_gp=10.0):
    """
    Compute the loss for the CWGAN-GP model.
    
    Args:
        real: Real images tensor.
        fake: Fake images tensor generated by the generator.
        discriminator: Discriminator model.
        lambda_gp: Gradient penalty coefficient.
    
    Returns:
        loss: Computed loss value.
    """
    # Discriminator loss
    real_pred = discriminator(real)
    fake_pred = discriminator(fake)
    
    d_loss = -torch.mean(real_pred) + torch.mean(fake_pred)
    
    # Gradient penalty
    alpha = torch.rand(real.size(0), 1, 1, 1).to(real.device)
    interpolates = alpha * real + (1 - alpha) * fake
    interpolates.requires_grad_(True)
    
    d_interpolates = discriminator(interpolates)
    gradients = autograd.grad(
        outputs=d_interpolates,
        inputs=interpolates,
        grad_outputs=torch.ones(d_interpolates.size()).to(real.device),
        create_graph=True,
        retain_graph=True
    )[0]
    
    gradient_penalty = ((gradients.norm(2, dim=1) - 1) ** 2).mean()
    
    return d_loss + lambda_gp * gradient_penalty